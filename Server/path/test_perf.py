import requests
import time

# [long1,lat1,long2,lat2, distance] 
_test_data = [
[ 73.35875899999999 , 22.6843011 , 73.9961854 , 18.5610789 , 461298.84396246 ],
[ 73.35875899999999 , 22.6843011 , 75.9917895 , 20.88684 , 337266.01438799 ],
[ 73.35875899999999 , 22.6843011 , 72.47064379999999 , 22.9669356 , 96391.24265243 ],
[ 70.7916122 , 22.2523996 , 73.0377602 , 18.999006299999998 , 429561.81226132 ],
[ 73.9114866 , 17.6799253 , 73.2905674 , 22.2665673 , 511900.46417003 ],
[ 74.24930979999999 , 16.7037706 , 75.445853 , 19.822419099999998 , 367636.03466571 ],
[ 73.8837351 , 15.5753224 , 73.9961854 , 18.5610789 , 330650.96472607 ],
[ 73.35875899999999 , 22.6843011 , 75.445853 , 19.822419099999998 , 383821.1882097 ],
[ 74.08917819999999 , 18.555028699999998 , 73.9961854 , 18.5610789 , 9839.77284585 ],
[ 70.7907188 , 22.264263399999997 , 73.2905674 , 22.2665673 , 257653.8203038 ],
]
class APISpeedTest():
    def perf_helper(self,long1,lat1,long2,lat2):
        url = f"http://localhost:8000/path/{long1},{lat1};{long2},{lat2}"
        start_time = time.time()
        requests.get(url)
        end_time = time.time()
               
        duration = end_time -start_time
        return duration
    def test_perfs(self):
        result = []
        for case in _test_data:
            dur = self.perf_helper(*case[:-1])
            result.append((case[-1], dur))
        print(result)
        
            
a = APISpeedTest()
a.test_perfs()

# Result 1  [(distance, time taken)]
# [(461298.84396246, 12.968502759933472), (337266.01438799, 11.02419924736023), (96391.24265243, 11.157000541687012), (429561.81226132, 11.909505128860474), (511900.46417003, 12.213010311126709), (367636.03466571, 14.916117668151855), (330650.96472607, 11.743092775344849), (383821.1882097, 11.375532388687134), (9839.77284585, 12.169137716293335), (257653.8203038, 13.792380332946777)]     

# Result 2  [(distance, time taken)]
# Adding Spatial Index to nodes and limiting amount of nodes searched using ST_DWITHIN
# [(461298.84396246, 8.587481498718262), (337266.01438799, 8.648917198181152), (96391.24265243, 9.148687601089478), (429561.81226132, 10.966825008392334), (511900.46417003, 8.845225811004639), (367636.03466571, 9.963709115982056), (330650.96472607, 9.598915100097656), (383821.1882097, 8.694976568222046), (9839.77284585, 9.117139101028442), (257653.8203038, 11.843034505844116)]

# Result 3
# Bounding box using geom_way (skipped profiling using wkt because it slows the program down)
# [(461298.84396246, 2.2604386806488037), (337266.01438799, 2.3096272945404053), (96391.24265243, 2.5279958248138428), (429561.81226132, 3.430044412612915), (511900.46417003, 2.1459543704986572), (367636.03466571, 2.5718955993652344), (330650.96472607, 1.1601402759552002), (383821.1882097, 2.52254581451416), (9839.77284585, 2.1387343406677246), (257653.8203038, 2.469464063644409)]

# Result 4
# Prev but with index on geom way
# [(461298.84396246, 0.5478696823120117), (337266.01438799, 0.8731427192687988), (96391.24265243, 0.9047591686248779), (429561.81226132, 2.278475522994995), (511900.46417003, 0.6274764537811279), (367636.03466571, 1.2524125576019287), (330650.96472607, 0.596001386642456), (383821.1882097, 1.2286639213562012), (9839.77284585, 0.647921085357666), (257653.8203038, 1.0198726654052734)]

# Result 5
# Prev but with the tables clustered along their indexes
# [(461298.84396246, 0.5307896137237549), (337266.01438799, 0.8164989948272705), (96391.24265243, 0.8162529468536377), (429561.81226132, 1.931326150894165), (511900.46417003, 0.5704517364501953), (367636.03466571, 1.0912864208221436), (330650.96472607, 0.5083472728729248), (383821.1882097, 1.1129908561706543), (9839.77284585, 0.5590550899505615), (257653.8203038, 0.8589396476745605)]



